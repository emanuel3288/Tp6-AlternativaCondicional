/*3. Sí se puede, sí se puede...
Escribir los siguientes procedimientos, recordando no mezclar niveles de abstracción del problema,
para lo cual puede ser necesario definir otros procedimientos y/o funciones.
a. SacarUnaFicha_SiSePuede(colorDeLaFicha) que, dado el colorDeLaFicha que debe
sacarse, saque una ficha siempre y cuando la misma esté en la celda. Si no hubiera fichas del
color dado, el procedimiento no hace nada. Si hubiera varias fichas, solo debe sacar una.
OBSERVACIÓN: cada ficha se representa con una bolita del color correspondiente.
b. DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante) que, dados
los colores de dos jugadores, cuyos puntos se representan mediante la cantidad de bolitas del
color del jugador,, otorgue un punto al jugador con color colorDelLocal solamente en el caso
en que la celda actual contiene la misma cantidad de bolitas de ambos colores.
c. ExpandirBacteriaDeLaColonia(), que siempre que en la celda actual haya un cultivo de
bacterias y haya suficientes nutrientes, agregue exactamente una bacteria más y consuma
nutrientes, a razón de dos nutrientes por bacteria expandida; si no hay bacterias o no hay
suficientes nutrientes, no hace nada. Las bacterias se representan con bolitas Verdes y los
nutrientes con bolitas Rojas.
d. PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha), que dado un color para
representar flechas, ponga una flecha al Norte si existe espacio para moverse en esa dirección.
Las flechas serán representadas con una bolita del color dado.*/

program {
    PonerFlecha_AlNorteSiCorresponde(Rojo)
}

//3-A
procedure SacarUnaFicha_SiSePuede(colorDeLaFicha) {
    /*
    Propósito:    -Saca si existe una ficha de **colorDeLaFicha** en la celda actual.
    Precondición: -Ningúna.
    Parámetros:
        **colorDeLaFicha**: Color. Indíca el color de la ficha a sacar.
    Observación:  -Cada ficha se representa con una bolita del color correspondiente.
    */
    if(hayUnaFichaDe_(colorDeLaFicha)) {
        Sacar(colorDeLaFicha)   
    }// como en el caso contrario no hace nada no pongo la rama else.
}

function hayUnaFichaDe_(colorDeLaFicha) {
    /*
    Propósito:    -Describe si hay una ficha de **colorDeLaFicha** en la celda actual.
    Precondición: -Ninguna.
    Parámetros:
        **colorDeLaFicha**: Color. Indíca el color de la ficha a comparar.
    Resultados: Retorna verdadero en el caso de que haya una ficha de **colorDeLaFicha** en la celda actual, en caso contrario retorna falso.
    */
    return(hayBolitas(colorDeLaFicha))    
}


//3-b
procedure DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante) {
    /*
    Propósito:      -Desempata a favor del jugador que tiene el **colorDelLocal** con un punto por sobre el jugador que tiene el **colorDelVisitante**.
    Precondición:   -Los jugadores deben tener la misma cantidad de puntos.
                    -La cantidad de puntos de cada jugador debe ser mayor a 0.
    Parámetros:
        **colorDelLocal**:      -Color. Indíca el color de uno de los jugadores.
        **colorDelVisitante**:  -Color. Indíca el color de otro de los jugadores.
    */
    if(hayEmpateDePuntos(colorDelLocal,colorDelVisitante)) {
        Poner(colorDelLocal)
    }
}

// armo una funcion que me describe la cantidad de bolitas verdes y rojas en la celda actual.
function hayEmpateDePuntos(colorDelLocal,colorDelVisitante) {
    /*
    Propósito:    -Describe si hay un empate de puntos entre los jugadores.
    Precondición: -Ninguna.
    Resultados:   -Retorna verdadero en el caso de que haya un empate de puntos entre los jugadores, en caso contrario retorna falso.
    */
    return(nroBolitas(colorDelLocal)==nroBolitas(colorDelVisitante))
}

//3-c
/*c. ExpandirBacteriaDeLaColonia(), que siempre que en la celda actual haya un cultivo de
bacterias y haya suficientes nutrientes, agregue exactamente una bacteria más y consuma
nutrientes, a razón de dos nutrientes por bacteria expandida; si no hay bacterias o no hay
suficientes nutrientes, no hace nada. Las bacterias se representan con bolitas Verdes y los
nutrientes con bolitas Rojas.*/
procedure ExpandirBacteriaDeLaColonia() {
    /*
    Propósito:      -Expande la colonia de baterias de la celda actual si hay un cultivo de bacterias y los nutrientes necesarios.
    Precondición:   -La cantidad de nutrientes debe ser el doble que la cantidad de bacterias.
    Observación:    -Las bacterias se representa con bolitas verdes y los nutrientes con bolitas rojas.
                    -Por cada bacteria se cosumen dos nutrientes.
    */
    if( hayBacteria() && hayNutrientesSuficientes() ) {
        Poner_DeColor_((nroBolitas(Rojo) div 2), Verde)
        Sacar_DeColor_(nroBolitas(Rojo)        , Rojo) ////////////////////////////////FALTA TERMINAR.
    }
}


function hayNutrientesSuficientes() {
    /*
    Propósito:      -Describe si hay nutrientes en la celda actual.
    Precondición:   -Ningúna.
    Resultados:     -Retorna verdadero en el caso de que haya nutrientes en la celda actual, en caso contrario retorna falso.
    */
    return(hayBolitas(Verde))
}

function hayBacteria() {
    /*
    Propósito:      -Describe si hay un cultivo de bacterias en la celda actual.
    Precondición:   -Ninguna.
    Resultados:     -Retorna verdadero en el caso de que haya un cultivo de bacterias en la celda actual, en caso contrario retorna falso.
    */
    return(hayBolitas(Rojo))
}
procedure Poner_DeColor_(cantidadAPoner, colorAPoner) {
  /*
  PROPOSITO:    -Poner **cantidadAPoner** de color **colorAPoner** en la celda actual.
  PRECONDICION: -Ninguna.
  PARAMETROS:   -**cantidadAPoner**: Numero.Indíca la cantidad de bolitas a poner.
                -**colorAPoner**:    Color. Indíca el color de la/s bolita/s a poner.
  */
  repeat(cantidadAPoner) {
    Poner(colorAPoner)
  }
}

procedure Sacar_DeColor_(cantidadASacar, colorASacar) {
  /*
  PROPOSITO:     -Saca **cantidadASacar** bolitas de color **colorASacar** de la celda actual.
  PRECONDICION:  -Debe existir al menos **cantidadASacar** bolita/s de color **colorASacar**.
  PARAMETROS:    -**cantidadASacar**: -Numero.Indíca el cantidad de bolitas a sacar de la celda actual.
                 -**colorASacar**:    -Color. Indíca el color de la bolita a sacar de la celda actual.
  OBSERVACIONES: La cantidad a sacar debe ser mayor a 0.
  */
  repeat(cantidadASacar) {
    Sacar(colorASacar)
  }
}

//d------------------------------------------------------------------------------------------------------------
/*
PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha), que dado un color para
representar flechas, ponga una flecha al Norte si existe espacio para moverse en esa dirección.
Las flechas serán representadas con una bolita del color dado.
*/
procedure PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha) {
    /*
    Proposito:      -Pone una flecha de **colorDeLaFlecha** en la celda lindante al norte.  
    Precondición:   -Ninguna(porque puedeMover--> es total?)
    Parámetros:
        **colorDeLaFlecha**: Color. Indíca el color de la flecha a poner en la celda actual.
    */
    if(puedeMover(Norte)) {
        Mover(Norte)
        Poner(colorDeLaFlecha)
        Mover(Sur)
    }
    
    /*
    Pero agregando como precondición: que debe existir la celda lindante al norte.
    Mover(Norte)
    Poner(colorDeLaFlecha)
    Mover(Sur)
    */
}














